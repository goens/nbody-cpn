#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

/* #include <gsl/gsl_cblas.h> */

#include "nbody.h"

/*
 * DATASET:
 * Dubinksi 1995 : The file dubinski.tab.gz contains a simple (free format) table of 7 columns and 81920 rows:
 * the masses and six phase space coordinates (x,y,z,vx,vy,vz) of 81920 particles that define the initial conditions
 * for a MW/Andromeda collision. 
 * Contact John Dubinski (dubinski@cita.utoronto.ca) for more details 
 * (see also: Dubinski, Mihos & Hernquist, 1996, ApJ, 462, 576). Its the model B collision discussed in this paper). 

 * \delta t = 0.1, this corresponds to 1.8e6 years when scaled to physical units for the galaxy
 * Plummer softening radius \epsilon = 0.025 (80pc) 
 */


/*
 * This is a Runge-Kutta step
 * For a given function f, it takes:
 *   - the time (or in general, ODE variable) t
 *   - the (current) solution vector (approximation) y
 *   - the step length for the next step h
 *
 */

/* inline seems to be unsupported? */
/*because of the fp I can't make this guy into a process, so I'll inline it */


__PNkpn Read_file __PNin (char filename[50])
	 __PNout( real_t mass, real_t y_zero[6], long N){

	 FILE *fp;
	 particle_t part; 
#ifdef READ_FROM_ARRAY
   long i;
#else
	 long read_status = 0;
#endif


	 __PNin(filename){
#ifndef READ_FROM_ARRAY
		  fp = fopen(filename,"r");
		  if(fp == NULL){
				printf("An error ocurred while reading the file: %s\n", filename);
		  }
#endif
	 }

	 __PNout(N){ 
#ifdef READ_FROM_ARRAY
     N = num_particles;
#else
		  /* a bit inefficient: determine the number of lines first for allocation */
		  while(!feof(fp))
		  {
				char ch = fgetc(fp);
				if(ch == '\n')
				{
					 N++;
				}
		  }
		  rewind(fp);
#endif
	 }

#ifdef READ_FROM_ARRAY
  for (i = 0; i < num_particles; ++i) {
    part.mass = particles[i][0];
    part.pos[0] = particles[i][1];
    part.pos[1] = particles[i][2];
    part.pos[2] = particles[i][3];
    part.vel[0] = particles[i][4];
    part.vel[1] = particles[i][5];
    part.vel[2] = particles[i][6];
#else
  read_status = 7;
  while(read_status == 7){
    read_status = fscanf(fp, "%lf %lf %lf %lf %lf %lf %lf\n", &(part.mass),
        &(part.pos[0]), &(part.pos[1]), &(part.pos[2]),
        &(part.vel[0]), &(part.vel[1]), &(part.vel[2]));
#endif
    __PNout(mass) { mass = part.mass; }

    __PNout(y_zero){
      int l;
      for(l=0;l<3;l++){
        y_zero[l] = part.pos[l];
        y_zero[l+3] = part.vel[l];
      }
      /* printf("x{%lf} ", part.pos[0]); */
    }
  }
}

/* hard coded array sizes. K for the biggest RK we might include */
__PNkpn RKStep __PNin( real_t t_chan, real_t h_chan, real_t f_t_y1[6], real_t f_t_y2[6], real_t f_t_y3[6], real_t f_t_y4[6], long N_chan, real_t y[6], real_t y_copy[6], real_t y_copy2[6], real_t y_copy3[6], real_t y_copy4[6])
	 __PNout( real_t t_fn1, real_t t_fn2, real_t t_fn3, real_t t_fn4, real_t y_fn1[6],  real_t y_fn2[6],  real_t y_fn3[6],  real_t y_fn4[6], real_t y_tilde[6], real_t t_tilde, real_t h_tilde){
	 /* __PNparam(rk_init_function_t rk_init ) */ /* TODO: make it really parametric for different rk methods */
  
	 long i,j,l;
	 /* indices for: 
		 i: equations (particles)
		 l: equations (components)
		 j: RK Butcher-Tableau
	 */

	 /*initialize with the maximal lengths from the different methods */
	 int m = 4;
	 const int n = 6; //components (2*dimensions)
	 long N;
	 real_t t,h;
	 __PNin(N_chan){ N = N_chan;}
  
	 /* Butcher Tableau */
	 int len_Alpha, len_Gamma, len_Beta, height_Beta;
	 real_t Alpha[m];
	 real_t Gamma[m];
	 real_t Beta[m*m];
	 set_rk4(&len_Alpha, Alpha, &len_Beta, &height_Beta, Beta, &len_Gamma, Gamma);
	 m = len_Alpha;
	 long k;

	 real_t **K = calloc(m,sizeof(real_t *));
	 for(j=0;j<m;j++){
		  K[j] = calloc(n*N,sizeof(real_t));
	 }
	 /* adaptive step parameters */
	 /* rvector_t *e; */
	 /* real_t eps2,c; */

	 /* do{ */
	 
	 while(1){

		  /* init step */ 
		  real_t sum[6];

		  __PNin(t_chan, h_chan){
				t = t_chan;
				h = h_chan;
		  }
		  /* here there's probably something fishy! */


		  /* execute the ODE function m times */
		  /* for(j=0;j<m;j++){ */ 
		  /* unroll loop by hand because I can't get it with cpn idiomatically */

		  j = 0; 
		  for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
				__PNin(y) __PNout(y_fn1){ 
					 for(l=0;l<n;l++){
						  y_fn1[l] = y[l];
					 }

					 /* update the arguments to calculate the next K[j] */
					 for(l=0;l<n;l++){
						  sum[l] = 0;
						  for(k=0;k<j;k++){
								sum[l]+= Beta[j*m+k]*K[k][n*i+l];
						  }
						  /* ynew[l] += h * sum[l] */
						  /* cblas_daxpy(n,h,&sum[l],1,&ynew[l],1); */
						  y_fn1[l] += h * sum[l];
					 }
				}
		  }

		  __PNout(t_fn1){
				t_fn1 = t + Alpha[j] * h;
		  }

		  for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
				__PNin(f_t_y1){
					 for(l=0;l<6;l++){
						  K[j][n*i+l] = f_t_y1[l];
					 }
				}
		  }

		  /* printf("finished. K[%ld][0] = %lf\n",j,K[j][0]); */
		  /* K[j] = (*f)(t + Alpha[j] * h, ynew + (h * sum)); */

		  j = 1;
				for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
					 __PNin(y_copy) __PNout(y_fn2){ /* here's the deadlock! (reading y for j=1*/
						  for(l=0;l<n;l++){
								y_fn2[l] = y_copy[l];
						  }

						  /* update the arguments to calculate the next K[j] */
						  for(l=0;l<n;l++){
								sum[l] = 0;
								for(k=0;k<j;k++){
									 sum[l]+= Beta[j*m+k]*K[k][n*i+l];
								}
								/* ynew[l] += h * sum[l] */
								/* cblas_daxpy(n,h,&sum[l],1,&ynew[l],1); */
								y_fn2[l] += h * sum[l];
						  }
					 }
				}
				__PNout(t_fn2){
					 t_fn2 = t + Alpha[j] * h;
				}

		  for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
				__PNin(f_t_y2){
					 for(l=0;l<6;l++){
						  K[j][n*i+l] = f_t_y2[l];
					 }
				}
		  }

		  /* printf("finished. K[%ld][0] = %lf\n",j,K[j][0]); */
		  /* K[j] = (*f)(t + Alpha[j] * h, ynew + (h * sum)); */

		  j = 2;
				for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
					 __PNin(y_copy2) __PNout(y_fn3){ /* here's the deadlock! (reading y for j=1*/
						  for(l=0;l<n;l++){
								y_fn3[l] = y_copy2[l];
						  }

						  /* update the arguments to calculate the next K[j] */
						  for(l=0;l<n;l++){
								sum[l] = 0;
								for(k=0;k<j;k++){
									 sum[l]+= Beta[j*m+k]*K[k][n*i+l];
								}
								/* ynew[l] += h * sum[l] */
								/* cblas_daxpy(n,h,&sum[l],1,&ynew[l],1); */
								y_fn3[l] += h * sum[l];
						  }
					 }
				}
				__PNout(t_fn3){
					 t_fn3 = t + Alpha[j] * h;
				}
		  for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
				__PNin(f_t_y3){
					 for(l=0;l<6;l++){
						  K[j][n*i+l] = f_t_y3[l];
					 }
				}
		  }

		  /* printf("finished. K[%ld][0] = %lf\n",j,K[j][0]); */
		  /* K[j] = (*f)(t + Alpha[j] * h, ynew + (h * sum)); */

		  j = 3;
				for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
					 __PNin(y_copy3) __PNout(y_fn4){ /* here's the deadlock! (reading y for j=1*/
						  for(l=0;l<n;l++){
								y_fn4[l] = y_copy3[l];
						  }

						  /* update the arguments to calculate the next K[j] */
						  for(l=0;l<n;l++){
								sum[l] = 0;
								for(k=0;k<j;k++){
									 sum[l]+= Beta[j*m+k]*K[k][n*i+l];
									 /* if(i==3 && l ==3) printf("sum_%ld_%d[%d]+= Beta[%d*%d+%d](%e)*K[%d][%d*%ld+%d](%e) = %e\n",i,k,l,j,m,k,Beta[j*m+k],k,n,i,l,K[k][n*i+l],sum[l]); */
								}
								/* ynew[l] += h * sum[l] */
								/* cblas_daxpy(n,h,&sum[l],1,&ynew[l],1); */
								y_fn4[l] += h * sum[l];
						  }
					 }
				}
				__PNout(t_fn4){
					 t_fn4 = t + Alpha[j] * h;
				}
		  for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
				__PNin(f_t_y4){
					 for(l=0;l<6;l++){
						  K[j][n*i+l] = f_t_y4[l];
					 }
				}
		  }

		  /* printf("finished. K[%ld][0] = %lf\n",j,K[j][0]); */
		  /* K[j] = (*f)(t + Alpha[j] * h, ynew + (h * sum)); */

		  /* }  */ /* end unrolled loop */


		  __PNout(t_tilde, h_tilde){
				for(i=0;i<N;i++){ /* this should be divided when having multiple workers! */
					 __PNin(y_copy4) __PNout(y_tilde){
						  for(l=0;l<n;l++){
								sum[l] = 0;

								for(j=0;j<m;j++){
									 /* if(i==0) */
									 /*     printf("sum[%ld] = %lf*%lf\n",l,Gamma[j],K[j][l]); */
									 sum[l]+=Gamma[j]*K[j][n*i+l]; //could rewrite in atlas
								}

								y_tilde[l] = y_copy4[l] + h*sum[l]; //atlas?
								/* if(i==0) */
								/*     printf("ynew[%ld] = %lf + %lf*%lf\n",l,y[l],h,sum[l]); */
						  }
						  t_tilde = t + h;
						  h_tilde = h; /* non-adaptive */
					 }
				}
		  }
		  /* error estimation (for the adaptive version) */

		  /* for(j=0;j<n;j++) sum[j] = 0; */

		  /* for(j=0;j<m;j++){ */
		  /* 	  sum+=Delta(j)*K(j); //atlas */
		  /* } */
		  /* e = h*sum; */
		  /* eps2 = e.NormMax(); //atlas? */
		  /* //cout << "eps = " << eps << " eps2 = " << eps2;   */
		  /* c = (real)0.9 * powl(eps/eps2  ,(1./(1.+Order))); */
		  /* t = t+h; */

		  /* if(eps2>eps){ */
		  /* 	t -= h; */
		  /* } */

		  /* if(c>5) c = 5; */
		  /* if(c<0.1) c = 0.1; */
		  /* h *= c; */
	 
	 
		  /* }while(eps2>eps); */
	 
	 }
	 for(j=0;j<m;j++){
		  free(K[j]);
	 }
	 free(K);

}


__PNkpn Nbody_n_sq_calculate_force __PNin(long N_chan, real_t mass, real_t y_chan[6], real_t t_chan, long i_chan)
	 __PNout(real_t f_i_j[3]){
	 long j,N;
	 int l;
	 real_t norm, last_t = -1;
    const int n = 6; /*components (2*dimensions) */
	 const real_t soft_eps_sq = soft_eps * soft_eps;

	 __PNin(N_chan){ N = N_chan; }
	 /* printf("reading masses for nbdoy..."); */
	 real_t *masses = malloc(N*sizeof(real_t));
	 real_t *y = malloc(N*n*sizeof(real_t));

	 for(j = 0; j < N; j++){
		  __PNin(mass){
				masses[j] = mass;
		  }
	 }
	 /* printf("done.\n"); */
	 
	 while(1){
		  __PNin(t_chan){
				if(t_chan != last_t){
					 /* printf("updating n_sq internal y to time %lf\n",t_chan); */
					 for(j=0;j<N;j++){
						  __PNin(y_chan){
								for(l=0;l<n/2;l++){ /* the first 3 components */
									 y[n*j+l] = y_chan[l];
									 y[n*j+n/2+l] = y_chan[n/2+l];
								}

						  }
					 }
					 last_t = t_chan;
				}
		  }
		  __PNin(i_chan) __PNout(f_i_j){
				for(l=0;l<n/2;l++){
					 f_i_j[l] = 0 ;
				}
	 
				for(j=0;j<N;j++){
					 if(i_chan != j){
						  /* rvector_t diff; */
						  /* for(l = 0;l<n/2;l++) diff[l] =  y[n*j+l]-y[n*i+l]; */
						  /* norm = pow(cblas_dnrm2(3,diff,1),3);  */
						  norm = 0;
						  for(l = 0; l<n/2;l++){
								/* if(i==3) */
								/* 	 printf("y_%ld[%d](%e) - y_%ld[%d](%e) = %e\n",j,l,y[n*j+l],i,l,y[n*i+l],pow(y[n*j+l]-y[n*i+l],2)); */
								norm += pow(y[n*j+l]-y[n*i_chan+l],2);
								/* if(i==3) */
								/* 	 printf("norm[%d]: %e\n",l,norm); */
						  }
						  if (norm < soft_eps_sq)
								norm = soft_eps_sq; /* minimal distance for numerical issues */
						  norm = pow(norm,3./2.);
								/* if(i==3) printf("finally: %e\n",norm); */
						  for(l=0;l<n/2;l++){
								f_i_j[l] += (masses[j] * G_const/norm * (y[n*j+l] - y[n*i_chan+l]));
								/* printf("f_%ld_%ld = %e * %e/%e * (%e - %e) =%e.\n ",i_chan,j,masses[j], G_const,norm , y[n*j+l] , y[n*i_chan+l],f_i_j[l]); */
						  }
						  /* if(i==3) printf("x[%ld] = %e %e %e %e %e %e.\n ",i,x[n*j+0] ,x[n*j+1] ,x[n*j+2] ,x[n*j+3] ,x[n*j+4] ,x[n*j+5]); */
					 }
				}
		  }
	 }
	 free(masses);
	 free(y);
}

__PNkpn Nbodyprob __PNin(long N_chan, real_t t_chan, real_t y_chan[6], real_t f_i_j[3])
	 __PNout(long i_calc, real_t t_calc, real_t x_chan[6]){
	 long N;
    long i,l;
    real_t norm, t;
	 
	 __PNin(N_chan){ N = N_chan; }
    const int n = 6; /*components (2*dimensions) */
    /* printf("executing nbody function with t = %lf",t); */

	 real_t *x = malloc(N*n*sizeof(real_t));

	 while(1){ 
		  /*__PNin(y:N) __PNout(x:N){*/ /*I would actually like to do this*/

		  __PNin(t_chan){ t = t_chan;}
		  for(i=0;i<N;i++){
				__PNin(y_chan){
					 for(l=0;l<n/2;l++){ 
						  x[n*i+l] = y_chan[n/2+l];  
						  x[n*i+n/2+l] = 0; 
					 }

				}
		  }

		  for(i=0;i<N;i++){
				__PNout(t_calc, i_calc){
					 /* call n_sq_calc */
					 i_calc = i;
					 t_calc = t;
				}
				__PNin(f_i_j){
					 /* printf("sum_f_f_%ld: %e, %e %e\n",i,f_i_j[0],f_i_j[1],f_i_j[2]); */
				__PNout(x_chan){
					 for(l=0;l<n/2;l++){
						  x[n*i + n/2 + l] = f_i_j[l];
						  x_chan[l] = x[n*i+l];
						  x_chan[l+n/2] = x[n*i+n/2+l];
					 }
					 /* printf("output: x[%ld]: %e,%e,%e,%e,%e,%e\n",i,x_chan[0],x_chan[1],x_chan[2],x_chan[3],x_chan[4],x_chan[5]); */
				}
				}
		  }
		  /* printf("outputing nbody f..."); */
		  /* printf("f done.\n"); */
		  /* if (i== 0) printf( " (af. int.) x[0] = %lf. ", x[0]); */
	 }
	 free(x);
}


__PNkpn Print_step __PNin(char filename_base_chan[50], long N_chan, real_t mass, real_t t, real_t y[6]){
	 /* setup phase */
	 char filename_base[50];
	 long N;
	 long i;
	 char not_finished = 1;

	 __PNin(filename_base_chan){ strcpy(filename_base,filename_base_chan);}
	 char output_string_base[strlen(filename_base) + 15];
	 char output_string[strlen(filename_base) + 15];
	 strcpy(output_string_base,filename_base);
	 __PNin(N_chan){ N = N_chan;}
	 real_t *masses = malloc(N*sizeof(real_t));
	 struct stat st = {0};

#ifdef OUTPUT_TO_FILE
	 if (stat("output", &st) == -1) {
		  mkdir("output", 0700);
	 }
#endif

	 for(i = 0; i < N; i++){
		  __PNin(mass){
				masses[i] = mass;
		  }
	 }
	 while(not_finished){
		  __PNin(t){
				if (t >= t_end_const)
					 not_finished = 0;
				/* printf("writing %lf",t); */
				char time[15];
				sprintf(time,".csv.%010.0lf",t);
				strcpy(output_string,output_string_base);
				strcat(output_string,time);

#ifdef OUTPUT_TO_FILE
				FILE *output_file = fopen(output_string,"w");
		    if(output_file == NULL){
				  printf("An error ocurred while reading the file: %s\n", output_string);
		    }
#endif
				/* printf("printint to file at time t = %lf: \n", t);  */
				for(i=0;i<N;i++){
					 __PNin(y){
#ifdef OUTPUT_TO_FILE
						  fprintf(output_file,"%lf,%lf,%lf,%lf,%lf,%lf,%lf\n",masses[i],y[0],y[1],y[2],y[3],y[4],y[5]);
#endif
					 }
				}
#ifdef OUTPUT_TO_FILE
				fclose(output_file);
#endif
		  }
	 }
	 free(masses);

	 exit(0);
}

__PNkpn Control __PNin(real_t y_read[6], long N_chan, real_t y_in[6], real_t t_in, real_t h_in) __PNout(char filename[50], char output_filename_base[50], real_t y[6], real_t t_chan, real_t h_chan){

	 /* initalization */
	 char name[] = input_filename;
	 char output_file[] = "output/nbody_sim";
	 long N,i;

	 real_t start_t =start_t_const, end_t=t_end_const, h=h_const;
    real_t t = start_t;
	 int l;

	 /* read particles from file */
	 __PNout(filename){ strcpy(filename,name);}
	 __PNout(output_filename_base){ strcpy(output_filename_base, output_file);}
	 __PNin(N_chan){ N = N_chan;}

	 printf("read a file with %ld particles\n",N);

	 /* solve differential equation */
    /* printf("Grav. const: %lf\n", G_const); */

	 /* send the first batch */
	 __PNout(t_chan,h_chan){
		  t_chan = t;
		  h_chan = h;
	 }
	 printf("starting first RKstep (N = %ld particles)... ", N);
	 for(i=0;i<N;i++){
		  /* printf("{r%ld}!",i); */
		  __PNin(y_read) __PNout(y){
				for(l=0;l<6;l++){
					 y[l] = y_read[l];
				}
				/* printf("w(%ld): x=%lf \n", i, y_read[0]); */
		  }
	 }

	 /* printf("first rkstep done (scheduled).\n"); */
	 while(t+h <  end_t){

		  /* printf("starting RKstep...\n"); */
		  __PNin(t_in,h_in) __PNout(t_chan,h_chan){
				/* t = t_in; */
				h = h_in;

				if(t+h >= end_t)
					 t = end_t;

				t+= h; /* for the non-adapting version */
				t_chan = t;
				h_chan = h;
		  }
		  /* __PNin(y_in:N) __PNout(y:N,t,h) */
		  for(i=0;i<N;i++){
				__PNin(y_in) __PNout(y){
					 for(l=0;l<6;l++){
						  y[l] = y_in[l];
					 }
				}
		  }
		  printf("RKstep done: t = %lf\n", t); 
	 }

	 /* clean up */ 
}

/*********************************/
/*     KPN Topology (Graph)      */
/*********************************/

/*
   a very interesting problem application:
   here, the necessary channel sizes, are 
   very much input dependent! 
*/

__PNchannel real_t y[6], y_read[6], y_fn1[6],y_fn2[6], y_fn3[6],y_fn4[6], f_t_y1[6], f_t_y2[6], f_t_y3[6], f_t_y4[6],y_tilde[6];
__PNchannel real_t mass,t,h,t_fn1,t_fn2,t_fn3,t_fn4,t_tilde, h_tilde;
__PNchannel real_t f_i_j1[3], f_i_j2[3], f_i_j3[3], f_i_j4[3]; 
__PNchannel real_t t_calc1, t_calc2, t_calc3, t_calc4; 
__PNchannel long i1,i2,i3,i4,n;
__PNchannel char filename[50],output_filename_base[50];

__PNprocess reader = Read_file 
	 __PNin(filename)
	 __PNout(mass,y_read,n);

__PNprocess control = Control 
	 __PNin(y_read,n,y_tilde,t_tilde,h_tilde)
	 __PNout(filename, output_filename_base, y, t, h);

__PNprocess writer = Print_step 
	 __PNin(output_filename_base, n, mass, t_tilde, y_tilde);

/* need 4 nbodies for rk4 */
__PNprocess nbody1 = Nbodyprob 
	 __PNin(n,t_fn1,y_fn1,f_i_j1)
	 __PNout(i1,t_calc1,f_t_y1);

__PNprocess n_sq_calc1 = Nbody_n_sq_calculate_force
	 __PNin(n,mass,y_fn1,t_calc1,i1)
	 __PNout(f_i_j1);

__PNprocess nbody2 = Nbodyprob 
	 __PNin(n,t_fn2,y_fn2,f_i_j2)
	 __PNout(i2,t_calc2,f_t_y2);
__PNprocess n_sq_calc2 = Nbody_n_sq_calculate_force
	 __PNin(n,mass,y_fn2,t_calc2,i2)
	 __PNout(f_i_j2);

__PNprocess nbody3 = Nbodyprob 
	 __PNin(n,t_fn3,y_fn3,f_i_j3)
	 __PNout(i3,t_calc3,f_t_y3);
__PNprocess n_sq_calc3 = Nbody_n_sq_calculate_force
	 __PNin(n,mass,y_fn3,t_calc3,i3)
	 __PNout(f_i_j3);

__PNprocess nbody4 = Nbodyprob 
	 __PNin(n,t_fn4,y_fn4,f_i_j4)
	 __PNout(i4,t_calc4,f_t_y4);
__PNprocess n_sq_calc4 = Nbody_n_sq_calculate_force
	 __PNin(n,mass,y_fn4,t_calc4,i4)
	 __PNout(f_i_j4);

/* here we could do parallel rk steps! (dlp) */
__PNprocess rk = RKStep 
	 __PNin( t, h,f_t_y1, f_t_y2, f_t_y3, f_t_y4,n, y,y,y,y,y)
	 __PNout( t_fn1, t_fn2,t_fn3,t_fn4, y_fn1,y_fn2,y_fn3, y_fn4, y_tilde, t_tilde, h_tilde);

